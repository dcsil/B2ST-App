#!/usr/bin/env bash

# Exit immediately if any subcommand fails
set -ea

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

if [[ $OSTYPE == 'darwin'* ]]; then
  DIR="$DIR/.."
fi

docker -v

# Install docker compose
echo "==> Installing docker compose"
sh "$DIR/script/install-docker-compose.sh"
echo "==> Docker compose installed"

command -v "docker" > /dev/null 2>&1 || {
  if [[ $OSTYPE == 'darwin'* ]]; then
    # Install Homebrew
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    
    brew update

    # Install dependencies from Brewfile
    cd "$DIR"
    pwd

    brew bundle check >/dev/null 2>&1  || {
        echo "==> Installing Homebrew dependenciesâ€¦"
        brew bundle
        # Install Python libraries
        pip install pandas matplotlib scikit-learn
    }
  else
    sh "$DIR/script/install-docker.sh"
  fi
}

# React js dependencies
cd "$DIR/client"
echo "==> Installing client dependencies"
npm install
echo "==> Client dependencies installed"

# Copy env variables if env file does not exist
echo "==> Updating client .env variables"
if [ ! -f .env ]
then
  cp -r .env.example .env
fi
echo "==> Client .env variables updated"

echo "==> Source ENV variables"
if [[ $OSTYPE == 'darwin'* ]]; then
 source .env
else
 . "$DIR/client/.env"
fi
echo "==> ENV variables sourced"

# Node js dependencies
cd "$DIR/server"
echo "==> Installing server dependencies"
npm install
echo "==> Server dependencies installed"


# Copy env variables if env file does not exist
echo "==> Updating server .env variables"
if [ ! -f .env ]
then
  cp -r .env.example .env
fi
echo "==> Server .env variables updated"

echo "==> Source ENV variables"
if [[ $OSTYPE == 'darwin'* ]]; then
 source .env
else
 . "$DIR/server/.env"
fi
echo "==> ENV variables sourced"



cd "$DIR"
pwd 


echo "==> Docker Compose"
docker compose up -d --build
echo "==> Docker Compose done"
